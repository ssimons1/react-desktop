'use strict';

exports.__esModule = true;
exports.createSelector = createSelector;
exports.getAllPropertyNames = getAllPropertyNames;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _lodashObjectHas = require('lodash/object/has');

var _lodashObjectHas2 = _interopRequireDefault(_lodashObjectHas);

var _compat = require('./compat');

var _DOMNodeUtils = require('./DOMNodeUtils');

var isPrimitive = function isPrimitive(value) {
  var typ = typeof value;
  return value === null || ['string', 'number'].indexOf(typ) !== -1;
};

var isValidPlainElement = function isValidPlainElement(element) {
  return typeof element === 'object' && element != null && _lodashObjectHas2['default'](element, 'type');
};

exports.isValidPlainElement = isValidPlainElement;
var isTextElement = function isTextElement(element) {
  return !isValidPlainElement(element) && element !== false && element != null;
};

exports.isTextElement = isTextElement;
var isDomElement = function isDomElement(element) {
  return !isTextElement(element) && typeof element.type === 'string' && element.type.toLowerCase() === element.type;
};

exports.isDomElement = isDomElement;
var isCompositeElement = function isCompositeElement(element) {
  return !isTextElement(element) && typeof element.type === 'function';
};

exports.isCompositeElement = isCompositeElement;
var isDOMComponent = _compat.ifDef({
  '<0.14.0': function _(inst) {
    return !!(inst && inst.tagName && inst.getDOMNode);
  },

  '*': function _(inst) {
    return !!(inst && inst.nodeType === 1 && inst.tagName);
  }
});

exports.isDOMComponent = isDOMComponent;
var isCompositeComponent = function isCompositeComponent(inst) {
  return !isDOMComponent(inst) || inst === null || typeof inst.render === 'function' && typeof inst.setState === 'function';
};

exports.isCompositeComponent = isCompositeComponent;
var isReactInstance = function isReactInstance(obj) {
  return obj != null && _lodashObjectHas2['default'](obj, '_currentElement') && (_lodashObjectHas2['default'](obj, '_instance') || _lodashObjectHas2['default'](obj, '_mountOrder') || _lodashObjectHas2['default'](obj, '_nativeNode') || _lodashObjectHas2['default'](obj, '_hostNode') || _lodashObjectHas2['default'](obj, '_rootNodeID'));
};

exports.isReactInstance = isReactInstance;
var getRenderedChildren = _compat.ifDef({

  '<0.14.0': function _(inst, pInst) {
    var child = inst._renderedComponent;
    return isDOMComponent(pInst) ? child._renderedChildren : child;
  },

  '*': function _(inst) {
    return inst._renderedChildren || inst._renderedComponent;
  }
});

exports.getRenderedChildren = getRenderedChildren;
exports.getInstanceFromNode = _DOMNodeUtils.getInstanceFromNode;
var InstanceMap = {
  get: function get(key) {
    return key._reactInternalInstance;
  }
};

exports.InstanceMap = InstanceMap;

function createSelector(prefix) {
  return selector;

  function selector(strings) {
    for (var _len = arguments.length, values = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      values[_key - 1] = arguments[_key];
    }

    if (!Array.isArray(strings)) {
      ;

      var _legacySelector$apply = legacySelector.apply(null, [strings].concat(values));

      strings = _legacySelector$apply[0];
      values = _legacySelector$apply[1];
    }var valueMap = Object.create(null);

    var selector = strings.reduce(function (rslt, string, idx) {
      var noValue = idx >= values.length,
          value = values[idx],
          strValue = '' + value;

      if (!noValue && !isPrimitive(value)) valueMap[strValue = prefix + idx] = value;

      return rslt + string + (noValue ? '' : strValue);
    }, '');

    return { selector: selector, valueMap: valueMap };
  }
}

function legacySelector() {
  var strings = [],
      values = [];

  for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
    args[_key2] = arguments[_key2];
  }

  args.forEach(function (arg, idx) {
    var isString = typeof arg === 'string';

    if (isString) strings.push(arg);else {
      if (idx === 0) strings.push('');
      values.push(arg);
    }
  });

  return [strings, values];
}

function getAllPropertyNames(obj) {
  var proto = Object.getPrototypeOf(obj),
      names = Object.getOwnPropertyNames(obj);

  if (proto) names.concat(getAllPropertyNames(proto));

  return names;
}